<?php

/**
 * ProcessWire Button Inputfield
 * expected by FieldtypeButton
 *
 * @author kixe (Christoph Thelen) 13.06.16
 * @license Licensed under GNU/GPL v3
 * @link http://processwire.com/talk
 * 
 * ProcessWire 2.x, 3.x 
 * Copyright (C) 2016 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 * @version 1.0.5
 * @since 1.0.1 added function isEmpty() to define this Inputfield as empty, if the label field is not populated (2016-07-27)
 * @since 1.0.2 disallow admin pages. Sanitized Selector string.
 *              Show Error if Sanitizer::url (target) returns an empty string. Modified Notice strings (2016-09-16)
 * @since 1.0.3 - synchronised version numbering (2016-12-06)
 * @since 1.0.4 - fixed repeater issue (2016-12-06)
 * @since 1.0.5 - added error and inputfield note for trashed pages (2017-06-16)
 *
 */

class InputfieldCTAButton extends Inputfield {

    public static function getModuleInfo() {
        return array(
            'title' => __('Inputfield Button', __FILE__),
            'summary' => __('Create and Edit a CTA button.', __FILE__),
            'version' => 105,
            'author' => 'kixe',
            'requires' => array("FieldtypeButton")
        );
    }

    public $languageSupport;
    protected $field;

    /**
     * Construct the Inputfield, setting defaults for all properties
     *
     */
    public function __construct() {
        $this->languageSupport = false;     
        parent::__construct();
    }

    /**
     * Set the current Field
     *
     * @param Field $field
     *
     */
    public function setField(Field $field) {
        $this->field = $field; 
    }

    /**
     * Per the Module interface, init() is called when the system is ready for API usage
     *
     */
    public function init() {
        return parent::init();
    }

    /**
     * Return the completed output of this Inputfield, ready for insertion in an XHTML form
     *
     * @return string
     *
     */
    public function ___render() {

        $name = $this->attr('name');
        $field = $this->field;
        $fieldSettingsPath = wire('config')->urls->admin."setup/field/edit?id=$field->id#fieldtypeConfig";
 
        if ($this->attr('value')) $value = $this->attr('value');
        else {
            $value = array('label' => '','target' => '','class' => '');
            if ($this->languageSupport) {
                foreach($this->languageSupport->otherLanguagePageIDs as $languageID) $value["label$languageID"] = '';
            }
        }

        $inputfields = new InputfieldFieldset();

        if ($field->provide_api) {
            $table = $this->modules->get("MarkupAdminDataTable");
            $table->setEncodeEntities(false);
            $header1 = $this->_('Variable');
            $header2 = $this->_('Value');
            $header3 = $this->_('Description');
            $table->headerRow(array($header1, $header2, $header3));

            $this->modules->get('JqueryUI')->use('modal');

            $content = array(
                "\$page->$name" => $this->_('Returns the Button object.'),
                "echo \$page->$name" => $this->_("Returns the complete markup string with populated string tags in current user language. Short version for")." <em style='color:rgb(59, 161, 234)'>\$page->{$name}->render()</em>.",
                "\$page->{$name}->label" => $this->_('Returns the button label in the default language.'),            
                "\$page->{$name}->target" => $this->_('Returns user language specific page url if target is detected as internal page. Any url string is allowed as value (http://example.org) Default: empty string.'),
                "\$page->{$name}->targetPage" => $this->_('Returns a Page object if target is detected as internal page. Default: NULL'),
                "\$page->{$name}->class" => $this->_('Returns the button CSS class. Default: empty string.'),
                "\$page->{$name}->html" => $this->_("Returns the markup string, as set in")." <a href='$fieldSettingsPath'>Field Settings</a>. ".
                $this->_("Placeholders (item properties) surrounded with curled brackets. If 'targetPage' is defined use dot syntax to get any field value or property of the target.")
                );

            if ($this->languageSupport) {
                $description = $this->_("Returns language specific (%s) button label.");
                foreach($this->languageSupport->otherLanguagePageIDs as $languageID) {
                    $lang = $this->languages->get("id=$languageID");
                    $content["\$page->{$name}->label$languageID"] = sprintf($description, $lang->name);
                }
            }

            foreach ($content as $col1 => $col3) {
                $split = explode('>',$col1);
                $property = array_pop($split);
                if ($property == 'targetPage') {
                    $str = $value->$property? "Page object (id={$value->$property})":'NULL';
                    $str = "<em class='description'>$str</em>";
                }
                else if ($property==$name) {
                    if (strpos($col1,'echo')===0) $str = htmlentities($value->render());
                    else $str = "<em class='description'>Button object</em>";
                }
                else $str = htmlentities($value->$property);
                $col1 = "<em style='color:rgb(59, 161, 234)'>$col1</em>";
                $col2 = $str;
                $table->row(array($col1, $col2, $col3));
            }

            $f = $this->modules->get("InputfieldMarkup");
            $f->value = $table->render();
            $f->label = $this->_("API");
            $f->collapsed = Inputfield::collapsedYes;
            $inputfields->add($f);
        }

        // label
        $f = $this->modules->get("InputfieldText");
        $f->label = $this->_("Label");
        $f->attr('name', "{$name}_label");
        $f->attr('value', $value->label);
        if ($this->languageSupport) {
            $f->useLanguages = true;
            foreach($this->languageSupport->otherLanguagePageIDs as $languageID) $f->attr("value$languageID", $value->{"label$languageID"});
        }
        $f->columnWidth = $field->hide_class? 50:33; 
        $inputfields->add($f);

        // target
        $f = $this->modules->get("InputfieldText");
        $f->label = $this->_("Target");
        $f->attr('name', "{$name}_target");
        $f->attr('value', $value->target);
        if ($value->targetPage) {
            $notes =  array();
            if ($value->targetPage->hasStatus(Page::statusUnpublished)) $notes[] = _('unpublished');
            if ($value->targetPage->hasStatus(Page::statusTrash)) $notes[] = _('trashed');
            $notes = count($notes)? ' ('.implode(', ',$notes).')':'';
            $f->notes = $this->_("Page ID:")." ".$value->targetPage->id.$notes;
        }
        $f->columnWidth = $field->hide_class? 50:33; 
        $inputfields->add($f);

        // class
        if (!$field->hide_class) {
            $f = $this->modules->get("InputfieldText");
            $f->label = $this->_("Class");
            $f->attr('name', "{$name}_class");
            $f->attr('value', $value->class);
            $f->columnWidth = 33; 
            $inputfields->add($f);
        }

        return $inputfields->render();
    }

    /**
     * This Inputfield is defined empty, if the label field is not populated
     *
     * Used by the 'required' check to see if the field is populated.
     * Overwrites parent function Inputfield::isEmpty()
     *
     * @return bool
     * @since 1.0.1 (2016-07-27)
     *
     */
    public function isEmpty() {
        $value = $this->attr('value');
        if (is_object($value) && !strlen("{$value->label}")) return true;
        return false; 
    }

    /**
     * Process the input from the given WireInputData (usually $input->get or $input->post), load and clean the value for use in this Inputfield.
     *
     * @param WireInputData $input
     * @return $this
     *
     */
    public function ___processInput(WireInputData $input) {

        $name = $this->attr('name');
        $value = $this->attr('value');
        // $value->targetSanitized = null;

        $input_names = array(
                'label' => "{$name}_label",
                'target' => "{$name}_target",
                'class' => "{$name}_class"
            );
        if ($this->languageSupport) {
            foreach ($this->languageSupport->otherLanguagePageIDs as $languageID) $input_names["label$languageID"] = "{$name}_label__$languageID";
        }

        // loop inputs and set them if changed
        foreach($input_names as $key => $name) {
            if(isset($input->$name) && $value->$key != $input->$name) {

                if ($key == 'target' && !empty($input->$name)) {
                    if (ctype_digit("{$input->$name}")) {
                        $target = wire('pages')->get("id={$input->$name},include=all");
                        if (!$target->id) {
                            $this->error(sprintf($this->_("Page with ID=%d doesn't exist"), $input->$name));
                            return $this;
                        }
                    }
                    else $target = wire('pages')->get('path='.$this->sanitizer->selectorValue($input->$name).',include=all');
                    if ($target->id) {                                 
                        $adminPage = wire('pages')->get("id=".$this->config->adminRootPageID);
                        if ($target->status >= 2048) {
                            //if($target->hasStatus(Page::statusUnpublished)) $this->warning(sprintf($this->_("The selected page with ID=%d is currently unpublished"), $input->$name));
                            if($target->hasStatus(Page::statusTrash)) $this->error(sprintf($this->_("The selected page with ID=%d is in the trash"), $input->$name));
                        }                     
                        else if($target->parents()->has($adminPage) || $target == $adminPage) {
                            $this->error(sprintf($this->_("The page with ID=%d is not an allowed target because it resides under the Admin page tree"), $input->$name));
                            return $this;
                        }
                    }
                    else if (!$this->sanitizer->url($input->$name)) {
                        $this->error(sprintf($this->_("The target '%s' is not a valid url"), $input->$name));
                        return $this;
                    }
                }           
                $value->set($key, $input->$name);
                // $this->warning($value); // DEBUGGING: var dump Button object
                $this->trackChange('value');
            }
        }
        return $this;
    }

}